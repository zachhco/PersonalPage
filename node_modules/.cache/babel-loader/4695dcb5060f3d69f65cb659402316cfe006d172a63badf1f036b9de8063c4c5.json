{"ast":null,"code":"import { __spreadArray, __read, __assign } from 'tslib';\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nvar globalProjectionState = {\n  /**\n   * Global flag as to whether the tree has animated since the last time\n   * we resized the window\n   */\n  hasAnimatedSinceResize: true,\n  /**\n   * We set this to true once, on the first update. Any nodes added to the tree beyond that\n   * update will be given a `data-projection-id` attribute.\n   */\n  hasEverUpdated: false\n};\nfunction createProjectionNode(_a) {\n  var attachResizeListener = _a.attachResizeListener,\n    defaultParent = _a.defaultParent,\n    measureScroll = _a.measureScroll,\n    resetTransform = _a.resetTransform;\n  return /** @class */function () {\n    function ProjectionNode(id, latestValues, parent) {\n      var _this = this;\n      if (latestValues === void 0) {\n        latestValues = {};\n      }\n      if (parent === void 0) {\n        parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n      }\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n      this.isLayoutDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to actually\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n      this.eventHandlers = new Map();\n      // Note: Currently only running on root node\n      this.potentialNodes = new Map();\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n          _this.clearAllSnapshots();\n        }\n      };\n      this.updateProjection = function () {\n        _this.nodes.forEach(resolveTargetDelta);\n        _this.nodes.forEach(calcProjection);\n      };\n      this.hasProjected = false;\n      this.isVisible = true;\n      /**\n       * Animation\n       */\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n      this.sharedNodes = new Map();\n      this.id = id;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      id && this.root.registerPotentialNode(id, this);\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n    ProjectionNode.prototype.addEventListener = function (name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n      return this.eventHandlers.get(name).add(handler);\n    };\n    ProjectionNode.prototype.notifyListeners = function (name) {\n      var args = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n      var subscriptionManager = this.eventHandlers.get(name);\n      subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));\n    };\n    ProjectionNode.prototype.hasListeners = function (name) {\n      return this.eventHandlers.has(name);\n    };\n    ProjectionNode.prototype.registerPotentialNode = function (id, node) {\n      this.potentialNodes.set(id, node);\n    };\n    /**\n     * Lifecycles\n     */\n    ProjectionNode.prototype.mount = function (instance, isLayoutDirty) {\n      var _this = this;\n      var _a;\n      if (isLayoutDirty === void 0) {\n        isLayoutDirty = false;\n      }\n      if (this.instance) return;\n      this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n      this.instance = instance;\n      var _b = this.options,\n        layoutId = _b.layoutId,\n        layout = _b.layout,\n        visualElement = _b.visualElement;\n      if (visualElement && !visualElement.getInstance()) {\n        visualElement.mount(instance);\n      }\n      this.root.nodes.add(this);\n      (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n      this.id && this.root.potentialNodes.delete(this.id);\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n      if (attachResizeListener) {\n        var unblockTimeout_1;\n        var resizeUnblockUpdate_1 = function () {\n          return _this.root.updateBlockedByResize = false;\n        };\n        attachResizeListener(instance, function () {\n          _this.root.updateBlockedByResize = true;\n          clearTimeout(unblockTimeout_1);\n          unblockTimeout_1 = setTimeout(resizeUnblockUpdate_1, 250);\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            _this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      }\n      // Only register the handler if it requires layout animation\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", function (_a) {\n          var _b, _c, _d, _e, _f;\n          var delta = _a.delta,\n            hasLayoutChanged = _a.hasLayoutChanged,\n            hasRelativeTargetChanged = _a.hasRelativeTargetChanged,\n            newLayout = _a.layout;\n          if (_this.isTreeAnimationBlocked()) {\n            _this.target = undefined;\n            _this.relativeTarget = undefined;\n            return;\n          }\n          // TODO: Check here if an animation exists\n          var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n          var onLayoutAnimationComplete = visualElement.getProps().onLayoutAnimationComplete;\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n          var targetChanged = !_this.targetLayout || !boxEquals(_this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n          var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n          if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {\n            if (_this.resumeFrom) {\n              _this.resumingFrom = _this.resumeFrom;\n              _this.resumingFrom.resumingFrom = undefined;\n            }\n            _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            _this.startAnimation(__assign(__assign({}, getValueTransition(layoutTransition, \"layout\")), {\n              onComplete: onLayoutAnimationComplete\n            }));\n          } else {\n            _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n          }\n          _this.targetLayout = newLayout;\n        });\n      }\n    };\n    ProjectionNode.prototype.unmount = function () {\n      var _a, _b;\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n      (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n      this.instance = undefined;\n      cancelSync.preRender(this.updateProjection);\n    };\n    // only on the root\n    ProjectionNode.prototype.blockUpdate = function () {\n      this.updateManuallyBlocked = true;\n    };\n    ProjectionNode.prototype.unblockUpdate = function () {\n      this.updateManuallyBlocked = false;\n    };\n    ProjectionNode.prototype.isUpdateBlocked = function () {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    };\n    ProjectionNode.prototype.isTreeAnimationBlocked = function () {\n      var _a;\n      return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n    };\n    // Note: currently only running on root node\n    ProjectionNode.prototype.startUpdate = function () {\n      var _a;\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n    };\n    ProjectionNode.prototype.willUpdate = function (shouldNotifyListeners) {\n      var _a, _b, _c;\n      if (shouldNotifyListeners === void 0) {\n        shouldNotifyListeners = true;\n      }\n      if (this.root.isUpdateBlocked()) {\n        (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n        return;\n      }\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n        node.shouldResetTransform = true;\n        /**\n         * TODO: Check we haven't updated the scroll\n         * since the last didUpdate\n         */\n        node.updateScroll();\n      }\n      var _d = this.options,\n        layoutId = _d.layoutId,\n        layout = _d.layout;\n      if (layoutId === undefined && !layout) return;\n      var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n      this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    };\n    // Note: Currently only running on root node\n    ProjectionNode.prototype.didUpdate = function () {\n      var updateWasBlocked = this.isUpdateBlocked();\n      // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n      if (!this.isUpdating) return;\n      this.isUpdating = false;\n      /**\n       * Search for and mount newly-added projection elements.\n       *\n       * TODO: Every time a new component is rendered we could search up the tree for\n       * the closest mounted node and query from there rather than document.\n       */\n      if (this.potentialNodes.size) {\n        this.potentialNodes.forEach(mountNodeEarly);\n        this.potentialNodes.clear();\n      }\n      /**\n       * Write\n       */\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots();\n      // Flush any scheduled updates\n      flushSync.update();\n      flushSync.preRender();\n      flushSync.render();\n    };\n    ProjectionNode.prototype.clearAllSnapshots = function () {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    };\n    ProjectionNode.prototype.scheduleUpdateProjection = function () {\n      sync.preRender(this.updateProjection, false, true);\n    };\n    ProjectionNode.prototype.scheduleCheckAfterUnmount = function () {\n      var _this = this;\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n      sync.postRender(function () {\n        if (_this.isLayoutDirty) {\n          _this.root.didUpdate();\n        } else {\n          _this.root.checkUpdateFailed();\n        }\n      });\n    };\n    /**\n     * Update measurements\n     */\n    ProjectionNode.prototype.updateSnapshot = function () {\n      if (this.snapshot || !this.instance) return;\n      var measured = this.measure();\n      var layout = this.removeTransform(this.removeElementScroll(measured));\n      roundBox(layout);\n      this.snapshot = {\n        measured: measured,\n        layout: layout,\n        latestValues: {}\n      };\n    };\n    ProjectionNode.prototype.updateLayout = function () {\n      var _a;\n      if (!this.instance) return;\n      // TODO: Incorporate into a forwarded scroll offset\n      this.updateScroll();\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.updateScroll();\n        }\n      }\n      var measured = this.measure();\n      roundBox(measured);\n      var prevLayout = this.layout;\n      this.layout = {\n        measured: measured,\n        actual: this.removeElementScroll(measured)\n      };\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.actual);\n      (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n    };\n    ProjectionNode.prototype.updateScroll = function () {\n      if (this.options.layoutScroll && this.instance) {\n        this.scroll = measureScroll(this.instance);\n      }\n    };\n    ProjectionNode.prototype.resetTransform = function () {\n      var _a;\n      if (!resetTransform) return;\n      var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n      var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    };\n    ProjectionNode.prototype.measure = function () {\n      var visualElement = this.options.visualElement;\n      if (!visualElement) return createBox();\n      var box = visualElement.measureViewportBox();\n      // Remove viewport scroll to give page-relative coordinates\n      var scroll = this.root.scroll;\n      if (scroll) {\n        translateAxis(box.x, scroll.x);\n        translateAxis(box.y, scroll.y);\n      }\n      return box;\n    };\n    ProjectionNode.prototype.removeElementScroll = function (box) {\n      var boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n        var scroll_1 = node.scroll,\n          options = node.options;\n        if (node !== this.root && scroll_1 && options.layoutScroll) {\n          translateAxis(boxWithoutScroll.x, scroll_1.x);\n          translateAxis(boxWithoutScroll.y, scroll_1.y);\n        }\n      }\n      return boxWithoutScroll;\n    };\n    ProjectionNode.prototype.applyTransform = function (box, transformOnly) {\n      if (transformOnly === void 0) {\n        transformOnly = false;\n      }\n      var withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.x,\n            y: -node.scroll.y\n          });\n        }\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n      return withTransforms;\n    };\n    ProjectionNode.prototype.removeTransform = function (box) {\n      var _a;\n      var boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        var sourceBox = createBox();\n        var nodeBox = node.measure();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n      }\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n      return boxWithoutTransform;\n    };\n    /**\n     *\n     */\n    ProjectionNode.prototype.setTargetDelta = function (delta) {\n      this.targetDelta = delta;\n      this.root.scheduleUpdateProjection();\n    };\n    ProjectionNode.prototype.setOptions = function (options) {\n      var _a;\n      this.options = __assign(__assign(__assign({}, this.options), options), {\n        crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true\n      });\n    };\n    ProjectionNode.prototype.clearMeasurements = function () {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    };\n    /**\n     * Frame calculations\n     */\n    ProjectionNode.prototype.resolveTargetDelta = function () {\n      var _a;\n      var _b = this.options,\n        layout = _b.layout,\n        layoutId = _b.layoutId;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n      // TODO If this is unsuccessful this currently happens every frame\n      if (!this.targetDelta && !this.relativeTarget) {\n        // TODO: This is a semi-repetition of further down this function, make DRY\n        this.relativeParent = this.getClosestProjectingParent();\n        if (this.relativeParent && this.relativeParent.layout) {\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n      if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.actual);\n        } else {\n          copyBoxInto(this.target, this.layout.actual);\n        }\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.actual);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        this.relativeParent = this.getClosestProjectingParent();\n        if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        }\n      }\n    };\n    ProjectionNode.prototype.getClosestProjectingParent = function () {\n      if (!this.parent || hasTransform(this.parent.latestValues)) return undefined;\n      if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    };\n    ProjectionNode.prototype.calcProjection = function () {\n      var _a;\n      var _b = this.options,\n        layout = _b.layout,\n        layoutId = _b.layoutId;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n      this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n      if (!this.layout || !(layout || layoutId)) return;\n      var lead = this.getLead();\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n      copyBoxInto(this.layoutCorrected, this.layout.actual);\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n      var target = lead.target;\n      if (!target) return;\n      if (!this.projectionDelta) {\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n      var prevTreeScaleX = this.treeScale.x;\n      var prevTreeScaleY = this.treeScale.y;\n      var prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n    };\n    ProjectionNode.prototype.hide = function () {\n      this.isVisible = false;\n      // TODO: Schedule render\n    };\n    ProjectionNode.prototype.show = function () {\n      this.isVisible = true;\n      // TODO: Schedule render\n    };\n    ProjectionNode.prototype.scheduleRender = function (notifyAll) {\n      var _a, _b, _c;\n      if (notifyAll === void 0) {\n        notifyAll = true;\n      }\n      (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n      notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    };\n    ProjectionNode.prototype.setAnimationOrigin = function (delta, hasOnlyRelativeTargetChanged) {\n      var _this = this;\n      var _a;\n      if (hasOnlyRelativeTargetChanged === void 0) {\n        hasOnlyRelativeTargetChanged = false;\n      }\n      var snapshot = this.snapshot;\n      var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n      var mixedValues = __assign({}, this.latestValues);\n      var targetDelta = createDelta();\n      this.relativeTarget = this.relativeTargetOrigin = undefined;\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      var relativeLayout = createBox();\n      var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n      var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n      var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.mixTargetDelta = function (latest) {\n        var _a;\n        var progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        _this.setTargetDelta(targetDelta);\n        if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n          calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n          mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n        }\n        if (isSharedLayoutAnimation) {\n          _this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n        _this.root.scheduleUpdateProjection();\n        _this.scheduleRender();\n      };\n      this.mixTargetDelta(0);\n    };\n    ProjectionNode.prototype.startAnimation = function (options) {\n      var _this = this;\n      var _a, _b;\n      (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      if (this.resumingFrom) {\n        (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n      }\n      if (this.pendingAnimation) {\n        cancelSync.update(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n      this.pendingAnimation = sync.update(function () {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        _this.currentAnimation = animate(0, animationTarget, __assign(__assign({}, options), {\n          onUpdate: function (latest) {\n            var _a;\n            _this.mixTargetDelta(latest);\n            (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n          },\n          onComplete: function () {\n            var _a;\n            (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n            _this.completeAnimation();\n          }\n        }));\n        if (_this.resumingFrom) {\n          _this.resumingFrom.currentAnimation = _this.currentAnimation;\n        }\n        _this.pendingAnimation = undefined;\n      });\n    };\n    ProjectionNode.prototype.completeAnimation = function () {\n      var _a;\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    };\n    ProjectionNode.prototype.finishAnimation = function () {\n      var _a;\n      if (this.currentAnimation) {\n        (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n        this.currentAnimation.stop();\n      }\n      this.completeAnimation();\n    };\n    ProjectionNode.prototype.applyTransformsToTarget = function () {\n      var _a = this.getLead(),\n        targetWithTransforms = _a.targetWithTransforms,\n        target = _a.target,\n        layout = _a.layout,\n        latestValues = _a.latestValues;\n      if (!targetWithTransforms || !target || !layout) return;\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n      transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its actual layout\n       * into the desired bounding box.\n       */\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    };\n    ProjectionNode.prototype.registerSharedNode = function (layoutId, node) {\n      var _a, _b, _c;\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n      var stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      node.promote({\n        transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n        preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n      });\n    };\n    ProjectionNode.prototype.isLead = function () {\n      var stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    };\n    ProjectionNode.prototype.getLead = function () {\n      var _a;\n      var layoutId = this.options.layoutId;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    };\n    ProjectionNode.prototype.getPrevLead = function () {\n      var _a;\n      var layoutId = this.options.layoutId;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    };\n    ProjectionNode.prototype.getStack = function () {\n      var layoutId = this.options.layoutId;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    };\n    ProjectionNode.prototype.promote = function (_a) {\n      var _b = _a === void 0 ? {} : _a,\n        needsReset = _b.needsReset,\n        transition = _b.transition,\n        preserveFollowOpacity = _b.preserveFollowOpacity;\n      var stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n      if (transition) this.setOptions({\n        transition: transition\n      });\n    };\n    ProjectionNode.prototype.relegate = function () {\n      var stack = this.getStack();\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    };\n    ProjectionNode.prototype.resetRotation = function () {\n      var visualElement = this.options.visualElement;\n      if (!visualElement) return;\n      // If there's no detected rotation values, we can early return without a forced render.\n      var hasRotate = false;\n      // Keep a record of all the values we've reset\n      var resetValues = {};\n      // Check the rotate value of all axes and reset to 0\n      for (var i = 0; i < transformAxes.length; i++) {\n        var axis = transformAxes[i];\n        var key = \"rotate\" + axis;\n        // If this rotation doesn't exist as a motion value, then we don't\n        // need to reset it\n        if (!visualElement.getStaticValue(key)) {\n          continue;\n        }\n        hasRotate = true;\n        // Record the rotation and then temporarily set it to 0\n        resetValues[key] = visualElement.getStaticValue(key);\n        visualElement.setStaticValue(key, 0);\n      }\n      // If there's no rotation values, we don't need to do any more.\n      if (!hasRotate) return;\n      // Force a render of this element to apply the transform with all rotations\n      // set to 0.\n      visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n      // Put back all the values we reset\n      for (var key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n      }\n      // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n      visualElement.scheduleRender();\n    };\n    ProjectionNode.prototype.getProjectionStyles = function (styleProp) {\n      var _a, _b, _c, _d, _e, _f;\n      if (styleProp === void 0) {\n        styleProp = {};\n      }\n      // TODO: Return lifecycle-persistent object\n      var styles = {};\n      if (!this.instance || this.isSVG) return styles;\n      if (!this.isVisible) {\n        return {\n          visibility: \"hidden\"\n        };\n      } else {\n        styles.visibility = \"\";\n      }\n      var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n      var lead = this.getLead();\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        var emptyStyles = {};\n        if (this.options.layoutId) {\n          emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        }\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n        return emptyStyles;\n      }\n      var valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n      var _g = this.projectionDelta,\n        x = _g.x,\n        y = _g.y;\n      styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its actual\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n      for (var key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        var _h = scaleCorrectors[key],\n          correct = _h.correct,\n          applyTo = _h.applyTo;\n        var corrected = correct(valuesToRender[key], lead);\n        if (applyTo) {\n          var num = applyTo.length;\n          for (var i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n      }\n      return styles;\n    };\n    ProjectionNode.prototype.clearSnapshot = function () {\n      this.resumeFrom = this.snapshot = undefined;\n    };\n    // Only run on root\n    ProjectionNode.prototype.resetTree = function () {\n      this.root.nodes.forEach(function (node) {\n        var _a;\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    };\n    return ProjectionNode;\n  }();\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c, _d;\n  var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _e = node.layout,\n      layout_1 = _e.actual,\n      measuredLayout = _e.measured;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (node.options.animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout_1[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (node.options.animationType === \"position\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(layout_1[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout_1, snapshot.layout);\n    var visualDelta = createDelta();\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n    } else {\n      calcBoxDelta(visualDelta, layout_1, snapshot.layout);\n    }\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      node.relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (node.relativeParent && !node.relativeParent.resumeFrom) {\n        var _f = node.relativeParent,\n          parentSnapshot = _f.snapshot,\n          parentLayout = _f.layout;\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout_1,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nfunction mountNodeEarly(node, id) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  var searchNode = node.root;\n  for (var i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nexport { createProjectionNode, globalProjectionState, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"names":["__spreadArray","__read","__assign","sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","transformAxes","FlatTree","resolveMotionValue","animationTarget","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","createProjectionNode","_a","attachResizeListener","defaultParent","measureScroll","resetTransform","ProjectionNode","id","latestValues","parent","_this","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","prototype","addEventListener","name","handler","has","set","get","add","notifyListeners","args","_i","arguments","subscriptionManager","notify","apply","hasListeners","node","mount","instance","SVGElement","tagName","_b","layoutId","layout","visualElement","getInstance","delete","unblockTimeout_1","resizeUnblockUpdate_1","clearTimeout","setTimeout","finishAnimation","registerSharedNode","_c","_d","_e","_f","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","startAnimation","onComplete","isLead","onExitComplete","call","unmount","willUpdate","remove","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","shouldNotifyListeners","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measured","measure","removeTransform","removeElementScroll","roundBox","alwaysMeasureLayout","prevLayout","actual","layoutCorrected","projectionDelta","notifyLayoutMeasure","layoutScroll","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","box","measureViewportBox","boxWithoutScroll","scroll_1","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","syncRender","getProjectionStyles","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","_g","transformOrigin","concat","origin","opacityExit","_h","correct","applyTo","corrected","num","resetTree","layout_1","measuredLayout","animationType","axisSnapshot","min","max","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["/Users/zachcohen/Desktop/web_design/PersonalPage/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { __spreadArray, __read, __assign } from 'tslib';\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\n/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nvar globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\nfunction createProjectionNode(_a) {\n    var attachResizeListener = _a.attachResizeListener, defaultParent = _a.defaultParent, measureScroll = _a.measureScroll, resetTransform = _a.resetTransform;\n    return /** @class */ (function () {\n        function ProjectionNode(id, latestValues, parent) {\n            var _this = this;\n            if (latestValues === void 0) { latestValues = {}; }\n            if (parent === void 0) { parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent(); }\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to actually\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = function () {\n                if (_this.isUpdating) {\n                    _this.isUpdating = false;\n                    _this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = function () {\n                _this.nodes.forEach(resolveTargetDelta);\n                _this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            /**\n             * Animation\n             */\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.id = id;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            id && this.root.registerPotentialNode(id, this);\n            for (var i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        ProjectionNode.prototype.addEventListener = function (name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        };\n        ProjectionNode.prototype.notifyListeners = function (name) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));\n        };\n        ProjectionNode.prototype.hasListeners = function (name) {\n            return this.eventHandlers.has(name);\n        };\n        ProjectionNode.prototype.registerPotentialNode = function (id, node) {\n            this.potentialNodes.set(id, node);\n        };\n        /**\n         * Lifecycles\n         */\n        ProjectionNode.prototype.mount = function (instance, isLayoutDirty) {\n            var _this = this;\n            var _a;\n            if (isLayoutDirty === void 0) { isLayoutDirty = false; }\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            var _b = this.options, layoutId = _b.layoutId, layout = _b.layout, visualElement = _b.visualElement;\n            if (visualElement && !visualElement.getInstance()) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.id && this.root.potentialNodes.delete(this.id);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                var unblockTimeout_1;\n                var resizeUnblockUpdate_1 = function () {\n                    return (_this.root.updateBlockedByResize = false);\n                };\n                attachResizeListener(instance, function () {\n                    _this.root.updateBlockedByResize = true;\n                    clearTimeout(unblockTimeout_1);\n                    unblockTimeout_1 = setTimeout(resizeUnblockUpdate_1, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        _this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", function (_a) {\n                    var _b, _c, _d, _e, _f;\n                    var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged, hasRelativeTargetChanged = _a.hasRelativeTargetChanged, newLayout = _a.layout;\n                    if (_this.isTreeAnimationBlocked()) {\n                        _this.target = undefined;\n                        _this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n                    var onLayoutAnimationComplete = visualElement.getProps().onLayoutAnimationComplete;\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    var targetChanged = !_this.targetLayout ||\n                        !boxEquals(_this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !_this.currentAnimation))) {\n                        if (_this.resumeFrom) {\n                            _this.resumingFrom = _this.resumeFrom;\n                            _this.resumingFrom.resumingFrom = undefined;\n                        }\n                        _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        _this.startAnimation(__assign(__assign({}, getValueTransition(layoutTransition, \"layout\")), { onComplete: onLayoutAnimationComplete }));\n                    }\n                    else {\n                        _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n                    }\n                    _this.targetLayout = newLayout;\n                });\n            }\n        };\n        ProjectionNode.prototype.unmount = function () {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        };\n        // only on the root\n        ProjectionNode.prototype.blockUpdate = function () {\n            this.updateManuallyBlocked = true;\n        };\n        ProjectionNode.prototype.unblockUpdate = function () {\n            this.updateManuallyBlocked = false;\n        };\n        ProjectionNode.prototype.isUpdateBlocked = function () {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        };\n        ProjectionNode.prototype.isTreeAnimationBlocked = function () {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        };\n        // Note: currently only running on root node\n        ProjectionNode.prototype.startUpdate = function () {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        };\n        ProjectionNode.prototype.willUpdate = function (shouldNotifyListeners) {\n            var _a, _b, _c;\n            if (shouldNotifyListeners === void 0) { shouldNotifyListeners = true; }\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */\n                node.updateScroll();\n            }\n            var _d = this.options, layoutId = _d.layoutId, layout = _d.layout;\n            if (layoutId === undefined && !layout)\n                return;\n            var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        };\n        // Note: Currently only running on root node\n        ProjectionNode.prototype.didUpdate = function () {\n            var updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        };\n        ProjectionNode.prototype.clearAllSnapshots = function () {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        };\n        ProjectionNode.prototype.scheduleUpdateProjection = function () {\n            sync.preRender(this.updateProjection, false, true);\n        };\n        ProjectionNode.prototype.scheduleCheckAfterUnmount = function () {\n            var _this = this;\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(function () {\n                if (_this.isLayoutDirty) {\n                    _this.root.didUpdate();\n                }\n                else {\n                    _this.root.checkUpdateFailed();\n                }\n            });\n        };\n        /**\n         * Update measurements\n         */\n        ProjectionNode.prototype.updateSnapshot = function () {\n            if (this.snapshot || !this.instance)\n                return;\n            var measured = this.measure();\n            var layout = this.removeTransform(this.removeElementScroll(measured));\n            roundBox(layout);\n            this.snapshot = {\n                measured: measured,\n                layout: layout,\n                latestValues: {},\n            };\n        };\n        ProjectionNode.prototype.updateLayout = function () {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (var i = 0; i < this.path.length; i++) {\n                    var node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            var measured = this.measure();\n            roundBox(measured);\n            var prevLayout = this.layout;\n            this.layout = {\n                measured: measured,\n                actual: this.removeElementScroll(measured),\n            };\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.actual);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n        };\n        ProjectionNode.prototype.updateScroll = function () {\n            if (this.options.layoutScroll && this.instance) {\n                this.scroll = measureScroll(this.instance);\n            }\n        };\n        ProjectionNode.prototype.resetTransform = function () {\n            var _a;\n            if (!resetTransform)\n                return;\n            var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        };\n        ProjectionNode.prototype.measure = function () {\n            var visualElement = this.options.visualElement;\n            if (!visualElement)\n                return createBox();\n            var box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            var scroll = this.root.scroll;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        };\n        ProjectionNode.prototype.removeElementScroll = function (box) {\n            var boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                var scroll_1 = node.scroll, options = node.options;\n                if (node !== this.root && scroll_1 && options.layoutScroll) {\n                    translateAxis(boxWithoutScroll.x, scroll_1.x);\n                    translateAxis(boxWithoutScroll.y, scroll_1.y);\n                }\n            }\n            return boxWithoutScroll;\n        };\n        ProjectionNode.prototype.applyTransform = function (box, transformOnly) {\n            if (transformOnly === void 0) { transformOnly = false; }\n            var withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        };\n        ProjectionNode.prototype.removeTransform = function (box) {\n            var _a;\n            var boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                var sourceBox = createBox();\n                var nodeBox = node.measure();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        };\n        /**\n         *\n         */\n        ProjectionNode.prototype.setTargetDelta = function (delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        };\n        ProjectionNode.prototype.setOptions = function (options) {\n            var _a;\n            this.options = __assign(__assign(__assign({}, this.options), options), { crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true });\n        };\n        ProjectionNode.prototype.clearMeasurements = function () {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        };\n        /**\n         * Frame calculations\n         */\n        ProjectionNode.prototype.resolveTargetDelta = function () {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && this.relativeParent.layout) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.actual);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.actual);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.actual);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent &&\n                    Boolean(this.relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !this.relativeParent.options.layoutScroll &&\n                    this.relativeParent.target) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n        };\n        ProjectionNode.prototype.getClosestProjectingParent = function () {\n            if (!this.parent || hasTransform(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        };\n        ProjectionNode.prototype.calcProjection = function () {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            var lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.actual);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            var target = lead.target;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            var prevTreeScaleX = this.treeScale.x;\n            var prevTreeScaleY = this.treeScale.y;\n            var prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        };\n        ProjectionNode.prototype.hide = function () {\n            this.isVisible = false;\n            // TODO: Schedule render\n        };\n        ProjectionNode.prototype.show = function () {\n            this.isVisible = true;\n            // TODO: Schedule render\n        };\n        ProjectionNode.prototype.scheduleRender = function (notifyAll) {\n            var _a, _b, _c;\n            if (notifyAll === void 0) { notifyAll = true; }\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        };\n        ProjectionNode.prototype.setAnimationOrigin = function (delta, hasOnlyRelativeTargetChanged) {\n            var _this = this;\n            var _a;\n            if (hasOnlyRelativeTargetChanged === void 0) { hasOnlyRelativeTargetChanged = false; }\n            var snapshot = this.snapshot;\n            var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            var mixedValues = __assign({}, this.latestValues);\n            var targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            var relativeLayout = createBox();\n            var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.mixTargetDelta = function (latest) {\n                var _a;\n                var progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                _this.setTargetDelta(targetDelta);\n                if (_this.relativeTarget &&\n                    _this.relativeTargetOrigin &&\n                    _this.layout &&\n                    ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n                    mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    _this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                _this.root.scheduleUpdateProjection();\n                _this.scheduleRender();\n            };\n            this.mixTargetDelta(0);\n        };\n        ProjectionNode.prototype.startAnimation = function (options) {\n            var _this = this;\n            var _a, _b;\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(function () {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                _this.currentAnimation = animate(0, animationTarget, __assign(__assign({}, options), { onUpdate: function (latest) {\n                        var _a;\n                        _this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    }, onComplete: function () {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        _this.completeAnimation();\n                    } }));\n                if (_this.resumingFrom) {\n                    _this.resumingFrom.currentAnimation = _this.currentAnimation;\n                }\n                _this.pendingAnimation = undefined;\n            });\n        };\n        ProjectionNode.prototype.completeAnimation = function () {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        };\n        ProjectionNode.prototype.finishAnimation = function () {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        };\n        ProjectionNode.prototype.applyTransformsToTarget = function () {\n            var _a = this.getLead(), targetWithTransforms = _a.targetWithTransforms, target = _a.target, layout = _a.layout, latestValues = _a.latestValues;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its actual layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        };\n        ProjectionNode.prototype.registerSharedNode = function (layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            var stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        };\n        ProjectionNode.prototype.isLead = function () {\n            var stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        };\n        ProjectionNode.prototype.getLead = function () {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        };\n        ProjectionNode.prototype.getPrevLead = function () {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        };\n        ProjectionNode.prototype.getStack = function () {\n            var layoutId = this.options.layoutId;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        };\n        ProjectionNode.prototype.promote = function (_a) {\n            var _b = _a === void 0 ? {} : _a, needsReset = _b.needsReset, transition = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;\n            var stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition: transition });\n        };\n        ProjectionNode.prototype.relegate = function () {\n            var stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        };\n        ProjectionNode.prototype.resetRotation = function () {\n            var visualElement = this.options.visualElement;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            var hasRotate = false;\n            // Keep a record of all the values we've reset\n            var resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (var i = 0; i < transformAxes.length; i++) {\n                var axis = transformAxes[i];\n                var key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n            // Put back all the values we reset\n            for (var key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        };\n        ProjectionNode.prototype.getProjectionStyles = function (styleProp) {\n            var _a, _b, _c, _d, _e, _f;\n            if (styleProp === void 0) { styleProp = {}; }\n            // TODO: Return lifecycle-persistent object\n            var styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            var lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                var emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            var valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            var _g = this.projectionDelta, x = _g.x, y = _g.y;\n            styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its actual\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\"\n                        : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (var key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                var _h = scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;\n                var corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    var num = applyTo.length;\n                    for (var i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        };\n        ProjectionNode.prototype.clearSnapshot = function () {\n            this.resumeFrom = this.snapshot = undefined;\n        };\n        // Only run on root\n        ProjectionNode.prototype.resetTree = function () {\n            this.root.nodes.forEach(function (node) { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        };\n        return ProjectionNode;\n    }());\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c, _d;\n    var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        var _e = node.layout, layout_1 = _e.actual, measuredLayout = _e.measured;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (node.options.animationType === \"size\") {\n            eachAxis(function (axis) {\n                var axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                var length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout_1[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (node.options.animationType === \"position\") {\n            eachAxis(function (axis) {\n                var axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                var length = calcLength(layout_1[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        var layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout_1, snapshot.layout);\n        var visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout_1, snapshot.layout);\n        }\n        var hasLayoutChanged = !isDeltaZero(layoutDelta);\n        var hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            node.relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (node.relativeParent && !node.relativeParent.resumeFrom) {\n                var _f = node.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;\n                if (parentSnapshot && parentLayout) {\n                    var relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n                    var relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout: layout_1,\n            snapshot: snapshot,\n            delta: visualDelta,\n            layoutDelta: layoutDelta,\n            hasLayoutChanged: hasLayoutChanged,\n            hasRelativeTargetChanged: hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    var searchNode = node.root;\n    for (var i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\n\nexport { createProjectionNode, globalProjectionState, mixAxis, mixAxisDelta, mixBox };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}